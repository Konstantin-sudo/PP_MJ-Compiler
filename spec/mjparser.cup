
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

	public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, LBRACE, RBRACE;
terminal CONST, SEMI, COMMA, EQUALS;
terminal Integer NUM;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;
terminal LSQUARE, RSQUARE;
terminal LPAREN, RPAREN;
terminal VOID;

terminal READ, PRINT, IF, ELSE, INCREMENT, DECREMENT;
terminal MINUS, NEW;
terminal PLUS, MUL, DIV, MOD, EQUAL_TO, NOT_EQUAL_TO, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal OR, AND;


nonterminal DeclarationList, MethodDeclList;
nonterminal Declaration, ConstDeclList, VarDeclList;
nonterminal ConstDeclExpressionList, ConstDeclExpression;
nonterminal VarIdentList, VarIdent, VarIdentError;
nonterminal MethodDecl, FormParsList, MethodVarDeclList, StatementList;
nonterminal FormPars, FormParsDecl;

nonterminal Statement, Matched, Unmatched, DesignatorStatement, ExprToAssign, Designator, ExprPrint, Expr, ExprDesignator;
nonterminal Term, Addop, Factor, Mulop;
nonterminal Relop, CondFact;
nonterminal Condition, CondTerm;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstValue;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;




Program ::= (Program) PROG ProgName:p DeclarationList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;


/*------------------------------- Declarations -------------------------------*/	
DeclarationList ::= (MultipleDeclarationList) DeclarationList Declaration 
					|
					(EmptyDeclarationList) /*epsilon*/
					;
					
Declaration ::= (ConstDeclarations) ConstDeclList
				|
				(VarDeclarations) VarDeclList 
				;


	/*------------------------------- Constant declaration -------------------------------*/				

ConstDeclList ::= (ConstDeclList) CONST Type ConstDeclExpressionList SEMI;

ConstDeclExpressionList ::= (MultipleConstDeclExpressionList) ConstDeclExpressionList COMMA ConstDeclExpression
						|
						(SingleConstDeclExpression) ConstDeclExpression
						;
			
ConstDeclExpression ::= (ConstDeclExpression) IDENT:constName EQUALS ConstValue:constValue;

ConstValue ::= (ConstValueNum) NUM:constValue
			   |
			   (ConstValueChar) CHAR:constValue
			   |
			   (ConstValueBool) BOOL:constValue
			   ;


	/*------------------------------- Var declaration -------------------------------*/	

VarDeclList ::= (VarDeclList) Type VarIdentList SEMI;

VarIdentList ::= (MultipleVarIdent) VarIdentList COMMA VarIdent
				 |
				 (SingleVarIdent) VarIdent 
				 ;
			
VarIdent ::= (BasicVarName) IDENT:varName
			 |
			 (ArrayVarName) IDENT:varArrayName LSQUARE RSQUARE
			 |
			 (VarIdentListError) error:l
			 {: 
			 	parser.report_info("Izvrsen oporavak od greske u liniji " + lleft, null);
			 :}					   
			 ; 




/*------------------------------- Method declarations -------------------------------*/

MethodDeclList ::= (MultipleMethodDecl) MethodDeclList MethodDecl
				   | 
				   (EmptyMethodDeclList) /*epsilon*/
				   ;

MethodDecl ::= (MethodDecl) VOID MethodName LPAREN FormParsList RPAREN MethodVarDeclList LBRACE StatementList RBRACE;

MethodName ::= (MethodName) IDENT:methodName;

Type ::= (Type) IDENT:typeName;


FormParsList ::= (NotEmptyFormParsList) FormPars		 
				 |
				 (EmptyFormParsList) /*epsilon*/
				 ;
				 			 
FormPars ::= (MultipleFormParsDecl) FormPars COMMA FormParsDecl
			 |
			 (SingleFormParsDecl) FormParsDecl
			 ;
			 
/* varDecl instead FormParsDecl ? */
FormParsDecl ::= (BasicFormParsDecl) Type IDENT:formParName
			     |
			     (ArrayFormParsDecl) Type IDENT:formParArrayName LBRACE RBRACE
			     ;
	
MethodVarDeclList ::= (NotEmptyMethodVarDeclList) MethodVarDeclList VarDeclList
					  |
					  (EmptyMethodVarDeclList) /*epsilon*/
					  ;
		

	/*------------------------------- Statements -------------------------------*/
		
StatementList ::= (NotEmptyStatementList) StatementList Statement
 				  |
 				  (EmptyStatementList) /*epsilon*/
 				  ;
 				  
 				  
Statement ::= (MatchedStatement) Matched
		      |
		   	  (UnmatchedStatement) Unmatched
		   	  ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
		 	  |
		 	  (UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
		 	  ;
		 	
Matched ::= (DesignatorStmt) DesignatorStatement SEMI
			|
			(ReadStatement) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStatement) PRINT LPAREN ExprPrint RPAREN SEMI
			|
			(NestedStatement) LBRACE StatementList RBRACE
			|
			(MatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Matched
			;
			  
		
DesignatorStatement ::= (DesignatorStatementAssign) Designator EQUALS ExprToAssign
						|
						(DesignatorStatementInc) Designator INCREMENT
						|
						(DesignatorStatementDec) Designator DECREMENT
						;
						
ExprToAssign ::= (ExprToAssignSuccess)  Expr
		   		 |
		   		 (ErrorAssign) error:a
   			     {: 
			   		parser.report_info("Izvrsen oporavak od greske u liniji " + aleft, null);
			     :} 
			     ;
		
Designator ::= (Designator) IDENT ExprDesignator;


	/*------------------------------- Expressions -------------------------------*/
	
ExprDesignator ::= (ArrayExprDesignator) LSQUARE Expr RSQUARE
				   |
				   (EmptyExprDesignator) /*epsilon*/
				   ;
				   
ExprPrint ::= (SingleExprPrint) Expr 
			  |
			  (ExprPrintAndNumConst) Expr COMMA NUM
			  ;

Expr ::= (SingleTermExpr) Term
		 |
		 (NegativeSingleTermExpr) MINUS Term
		 |
		 (TermAddopExprList) Expr Addop Term
		 ;
								
Term ::= (SingleTermFactor) Factor
		 |
		 (TermMulopFactorList) Term Mulop Factor
		 ;

Factor ::= (FactorDesignator) Designator
		   |
		   (FactorNumConst) NUM
		   |
		   (FactorCharConst) CHAR
		   |
		   (FactorBoolConst) BOOL
		   |
		   (FactorExpr) LPAREN Expr RPAREN
		   |
		   (FactorArray) NEW Type LSQUARE Expr RSQUARE
		   ;	
			   

	/*------------------------------- Operators -------------------------------*/
	
Addop ::= (PlusOp) PLUS
		  |
		  (MinusOp) MINUS
		  ;

Mulop ::= (MultipleOp) MUL
		  |
		  (DivideOp) DIV 
		  |
		  (ModuleOp) MOD
		  ;

Relop ::= (EqualToOp) EQUAL_TO
		  |
		  (NotEqualToOp) NOT_EQUAL_TO
		  |
		  (GreaterThenOp) GREATER
		  |
		  (GreaterThenOrEqualToOp) GREATER_EQUAL
		  |
		  (LessThenOp) LESS
		  |
		  (LessThenOrEqualToOp) LESS_EQUAL
		  ;
		  


	/*------------------------------- Conditions -------------------------------*/
	
Condition ::= (ConditionTermDisjunctionList) Condition OR CondTerm
			  |
			  (SingleConditionTerm) CondTerm
			  ;
			  
CondTerm ::= (ConditionFactConjunctionList) CondTerm AND CondFact
			 |
			 (SingleConditionFact) CondFact
			 ;
			  
CondFact ::= (CondFactExpr) Expr
			 |
			 (CondFactExprWithRelop) Expr Relop Expr
			 ;
			  


