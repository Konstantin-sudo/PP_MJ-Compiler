

terminal PROG, IDENT, LBRACE, RBRACE;
terminal CONST, SEMI, COMMA, EQUAL, NUM, CHAR, BOOL;
terminal LSQUARE, RSQUARE;
terminal LPAREN, RPAREN;
terminal VOID;

terminal READ, PRINT, INCREMENT, DECREMENT, EQUALS;
terminal MINUS, NEW;
terminal PLUS, MUL, DIV, MOD, EQUAL_TO, NOT_EQUAL_TO, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL, QUESTION, COLON;
terminal OR, AND;


nonterminal Program, DeclarationList, MethodDeclList;
nonterminal Declaration, ConstDeclList, VarDeclList;
nonterminal Type, ConstDeclExpressionList, ConstDeclExpression, ConstValue;
nonterminal VarIdentList, VarIdent;
nonterminal MethodDecl, MethodReturnType, FormParsList, StatementList;
nonterminal Type;
nonterminal FormPars, FormParsDecl;
nonterminal StatementList;

nonterminal Statement, DesignatorStatement, Designator, ExprPrint, Expr, ExprDesignator;
nonterminal Term, Addop, TernarOp, Factor, Mulop;
nonterminal Relop, CondFact;
nonterminal Condition, CondTerm;

Program ::= (Program) PROG IDENT:programName DeclarationList LBRACE MethodDeclList RBRACE;



/*------------------------------- Declarations -------------------------------*/	
DeclarationList ::= (DeclarationList) DeclarationList Declaration 
					|
					(EmptyDeclarationList) /*epsilon*/
					;
					
Declaration ::= (ConstDeclarations) ConstDeclList
				|
				(VarDeclarations) VarDeclList 
				;


	/*------------------------------- Constant declaration -------------------------------*/				

ConstDeclList ::= (ConstDeclList) CONST Type:constType ConstDeclExpressionList SEMI;

ConstDeclExpressionList ::= (ConstDeclExpressionList) ConstDeclExpressionList COMMA ConstDeclExpression
						|
						(SingleConstDeclExpression) ConstDeclExpression
						;
			
ConstDeclExpression ::= (ConstDeclExpression) IDENT:constIdent EQUAL ConstValue:constValue;

ConstValue ::= (ConstValueNum) NUM
			   |
			   (ConstValueChar) CHAR 
			   |
			   (ConstValueBool) BOOL
			   ;


	/*------------------------------- Var declaration -------------------------------*/	

VarDeclList ::= (VarDeclList) Type:varType VarIdentList SEMI;

VarIdentList ::= (VarIdentList) VarIdentList COMMA VarIdent
				 |
				 (SingleVarIdent) VarIdent 
				 ;
			
VarIdent ::= (VarIdent) IDENT:varIdent
			 |
			 (ArrayIdent) IDENT:arrayIdent LSQUARE RSQUARE
			 ;




/*------------------------------- Method declarations -------------------------------*/

MethodDeclList ::= (MethodDeclList) MethodDeclList MethodDecl
				   | 
				   (EmptyMethodDeclList) /*epsilon*/
				   ;

MethodDecl ::= (MethodDecl) MethodReturnType IDENT:methodName LPAREN FormParsList RPAREN VarDeclList LBRACE StatementList RBRACE;


MethodReturnType ::= (BasicReturnType) Type
					 |
					 (VoidReturnType) VOID
					 ;
				
Type ::= (Type) IDENT;


FormParsList ::= (FormParsList) FormPars		 
				 |
				 (EmptyFormParsList) /*epsilon*/
				 ;
				 			 
FormPars ::= (FormParsmDeclList) FormPars COMMA FormParsDecl
			 |
			 (SingleFormParsDecl) FormParsDecl
			 ;
			 
/* varDecl instead FormParsDecl ? */
FormParsDecl ::= (FormParsDecl) Type IDENT
			     |
			     (FormParsDeclArray) Type IDENT LBRACE RBRACE
			     ;
		
				 


	/*------------------------------- Statements -------------------------------*/
		
StatementList ::= (StatementList) StatementList Statement
 				  |
 				  (EmptyStatementList) /*epsilon*/
 				  ;

Statement ::= (DesignatorStatement) DesignatorStatement SEMI
			  |
			  (ReadStatement) READ LPAREN Designator RPAREN SEMI
			  |
			  (PrintStatement) PRINT LPAREN ExprPrint RPAREN SEMI
			  ;
			  /*if else*/
		
DesignatorStatement ::= (DesignatorAssign) Designator EQUALS Expr
						|
						(DesignatorInc) Designator INCREMENT
						|
						(DesignatorDec) Designator DECREMENT
						;
		
Designator ::= (Designator) IDENT ExprDesignator;


	/*------------------------------- Expressions -------------------------------*/
	
ExprDesignator ::= (ExprDesignator) LSQUARE Expr RSQUARE
				   |
				   (EmptyExprDesignator) /*epsilon*/
				   
ExprPrint ::= (ExprPrint) Expr 
			  |
			  (ExprPintAndNumConst) Expr COMMA NUM
			  ;

Expr ::= (SingleTermExpr) Term
		 |
		 (NegativeSingleTermExpr) MINUS Term
		 |
		 (TermExprAddopList) Expr Addop Term
		 |
		 (TernarOpExpr) TernarOp
		 ;
								
Term ::= (SingleTermFactor) Factor
		 |
		 (TermFactorMulopList) Term Mulop Factor
		 ;

Factor ::= (FactorDesignator) Designator
		   |
		   (FactorNumConst) NUM
		   |
		   (FactorCharConst) CHAR
		   |
		   (FactorBoolConst) BOOL
		   |
		   (FactorExpr) LPAREN Expr RPAREN
		   |
		   (FactorArray) NEW Type LSQUARE Expr RSQUARE
		   ;	
			   


	/*------------------------------- Operators -------------------------------*/
	
Addop ::= (PlusOp) PLUS
		  |
		  (MinusOp) MINUS
		  ;

Mulop ::= (MultipleOp) MUL
		  |
		  (DivideOp) DIV 
		  |
		  (ModuleOp) MOD
		  ;

Relop ::= (EqualToOp) EQUAL_TO
		  |
		  (NotEqualToOp) NOT_EQUAL_TO
		  |
		  (GreaterThenOp) GREATER
		  |
		  (GreaterThenOrEqualToOp) GREATER_EQUAL
		  |
		  (LessThenOp) LESS
		  |
		  (LessThenOrEqualToOp) LESS_EQUAL
		  ;
		  
TernarOp ::= (TernarOp) CondFact QUESTION Expr COLON Expr;



	/*------------------------------- Conditions -------------------------------*/
	
Condition ::= (ConditionList) Condition OR CondTerm
			  |
			  (SingleCondition) CondTerm
			  ;
			  
CondTerm ::= (CondTermList) CondTerm AND CondFact
			 |
			 (SingleCondTerm) CondFact
			 ;
			  
CondFact ::= (CondFact) Expr
			 |
			 (CondFactWithRelop) Expr Relop Expr
			 ;
			  


